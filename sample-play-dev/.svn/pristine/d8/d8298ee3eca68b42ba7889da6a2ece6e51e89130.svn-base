
{curl-file-attributes character-encoding = "utf8"}


|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
{define-class public AMFApplication {inherits Frame}

  field public-get ctrl-output :#Frame
  
  field public-get ctrl-grid :#RecordGrid
  field public-get ctrl-url:#TextField
  field public-get ctrl-target:#TextField
  field public-get ctrl-method:#TextField
  field public-get ctrl-params:#TextArea

  field public-get cmd:#CommandButton
  
  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  {constructor public {default
                          ...
                      }

    {self.make-controls}
    {self.make-layout}

    
    {construct-super

        
        {splice ...}
    }
  }



  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  {method public {make-controls}:void
    set self.ctrl-output =
        {Frame
            width={make-elastic}, height={make-elastic}
        }
    
    set self.ctrl-grid = 
        {RecordGrid
            width={make-elastic}, height={make-elastic}
        }


    set self.ctrl-url =
        {TextField width={make-elastic},
            value="http://localhost:8080/elastic/main"
        }

    set self.ctrl-target =
        {TextField width={make-elastic},
            value="DefaultDestination"
        }

    set self.ctrl-method =
        {TextField width={make-elastic},
            value="execute"
        }
    
    set self.ctrl-params =
        {TextArea width={make-elastic}, height=60px,
            value="cmd=DefaultService&sqlId=sample.mysql_select1&COL_LIMIT:Integer=3000"
        }

    set self.cmd =
        {CommandButton label="Submit", width=100px,
            {on Action do
                {with-busy-cursor
                    {self.do-retrieve-amf}
                }
            }
        }

  }

  

  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  {method public {make-layout}:void
    
    {self.add replace?=true,
        {VBox width={make-elastic}, height={make-elastic},            
            spacing=5px,
            
            {HBox valign="center",
                {Frame width=200px,  color = "blue",
                    "endpoint"
                },
                self.ctrl-url
            },
            {HBox valign="center",
                {Frame width=200px,  color = "blue",
                    "destination(class)"
                },
                self.ctrl-target
            },
            {HBox valign="center",
                {Frame width=200px,  color = "blue",
                    "operation(method)"
                },
                self.ctrl-method
            },
            
            {HBox valign="top",
                {Frame width=200px,  color = "blue",
                    "params"
                },
                self.ctrl-params,
                self.cmd
            },
            {HBox valign="center", width={make-elastic}, height={make-elastic},
                {GroupBox label="output",
                    width={make-elastic}, height={make-elastic},
                    self.ctrl-output
                    ||self.ctrl-grid
                }
            }
        }
    }
  }
  
  {method public {do-retrieve-amf}:void

    let retry-count:int = 0
    {with-busy-cursor 
        let error?:bool = true

        def endpoint = {url self.ctrl-url.value} 
        def destination = self.ctrl-target.value
        
        def service =
            {RemoteObject
                endpoint,
                destination}
        
        let get-products:Operation = {service.get-operation self.ctrl-method.value} asa Operation   || 占쌨소듸옙

        let start-dt:DateTime = {DateTime}
        let end-dt:DateTime = {DateTime}
        {get-products.add-event-handler
            {on e:ResultEvent do
                set end-dt = {DateTime}
                def message = {lformat "%s", {String end-dt - start-dt}}
                
                {if e.result isa ArrayCollection then
                    let rv:#RecordView = {proc-present-amf-with-single-record-set e.result asa ArrayCollection}

                    {if-non-null rv then
                        ||set self.ctrl-grid.record-source = rv asa RecordView
                        {self.ctrl-output.add replace?=true,
                            {RecordGrid record-source=rv asa RecordView,
                                width={make-elastic}, height={make-elastic}
                            }
                        }
                     else
                        {popup-message
                            "message1"
                        }
                    }
                 elseif e.result isa SealedDataObject then
                    {proc-present-amf-with-multi-record-set e.result asa SealedDataObject}
                }
            }
        }
        
        {get-products.add-event-handler
            {on e:FaultEvent do
                {inc retry-count}
                def f = e.fault
                def msg = {message Fault Code: {value f.fault-code}
                              '{value f.fault-string}'}
                {if retry-count == 3 then
                    {popup-message
                        "message2"
                    }
                    {return}
                 else
                    {get-products.send {String "param1"}}
                }
            }
        }

        let params:StringArray = {StringArray}
        {if self.ctrl-params.value != "" then
            def strs = {(self.ctrl-params.value).split split-chars="\n"}

            {params.concat strs}
        }

        {after 0s do
            {if params.size == 0 then
                {get-products.send}
             else
                {get-products.send {splice params}}
            }
        }
    }
  }
}