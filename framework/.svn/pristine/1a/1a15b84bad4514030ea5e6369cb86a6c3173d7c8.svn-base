package elasticservice.web.play

import com.typesafe.scalalogging.LazyLogging
import elasticservice.Key
import elasticservice.ElasticConfigurator
import elasticservice.util.DataValid
import elasticservice.util.ep.ElasticParamsReader
import elasticservice.util.ep.InputSourceMeta
import play.api.mvc.RawBuffer
import play.api.mvc.Request
import elasticservice.DefaultVal

case class PlayReader(request: Request[RawBuffer]) extends ElasticParamsReader with LazyLogging {

  def read(): InputSourceMeta = {
    val contentType = request.contentType.getOrElse("")
    val encodingOpt = request.charset.orElse(ElasticConfigurator.Charset)
    val text = if (DataValid.isNotEmpty(request.rawQueryString))
      request.rawQueryString
    else
      new String(request.body.asBytes(10000L).getOrElse(Array.empty[Byte]), encodingOpt.getOrElse(DefaultVal.Charset))

    logger.trace(s"method: ${request.method}")
    logger.trace(s"contentType: ${request.contentType.getOrElse("")}")
    logger.trace(s"encoding: ${request.charset}")
    logger.trace(s"request.body.toString(): ${request.body.toString()}")

    InputSourceMeta(text, contentType, encodingOpt, request)
  }
}