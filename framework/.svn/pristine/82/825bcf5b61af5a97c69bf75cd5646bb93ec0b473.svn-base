package elasticservice.web.servlet

import java.io.File
import com.typesafe.scalalogging.LazyLogging
import elasticservice.ElasticConfigurator
import elasticservice.Key
import elasticservice.util.DataValid
import elasticservice.util.ExceptionDetail
import elasticservice.util.FilePathUtil
import javax.servlet.ServletContextEvent
import javax.servlet.ServletContextListener
import elasticservice.DefaultVal

class ServletConfigListener extends ServletContextListener with LazyLogging {
  def contextDestroyed(sce: ServletContextEvent) { /* FileWatcherTimer.cancelAll() */ }

  def contextInitialized(sce: ServletContextEvent) {
    try {
      val context = sce.getServletContext()

      var esConfig = context.getInitParameter(Key.PropESConfig)

      if (DataValid.isEmpty(esConfig) || !new File(esConfig).isDirectory)
        esConfig = context.getRealPath("/") + File.separator + Key.PropESConfig

      var xmlPath = FilePathUtil.getAbsolutePath(esConfig, DefaultVal.ESXMLFile)
      val xmlFile = new File(xmlPath)

      if (!xmlFile.exists)
        throw new Exception("file not found: " + xmlPath)
      else if (!xmlFile.isFile)
        throw new Exception("not file: " + xmlPath)
      else
        ElasticConfigurator.init(new File(xmlPath))
    } catch {
      case e: Throwable =>
        logger.error(ExceptionDetail.getDetail(e))
        throw e
    }
  }
}