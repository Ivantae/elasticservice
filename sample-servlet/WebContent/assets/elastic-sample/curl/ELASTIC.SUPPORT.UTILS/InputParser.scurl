{curl-file-attributes character-encoding = "utf8"}

{import * from CURL.XML.SAX.HELPERS}
{import * from CURL.XML.SAX.PARSER}

||--
||--{let public constant RecordViewHashTable:ParameterizedType = {HashTable-of String, RecordView}}
||--{let public constant RecordViewArray:ParameterizedType = {Array-of RecordView}}
||--{let public constant ParamHashTable:ParameterizedType = {HashTable-of String, StringStringTable}}
||--

{define-class public InputParser {inherits DefaultHandler}

  ||
  field public-get error-code:int=0
  field public-get error-msg:String=""

  field public-get params:ParamHashTable = {ParamHashTable}  
  field public-get dataset-id:String = ""

  ||레코드 생성용
  field tag:String = ""
  field param-id:String = ""

  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  {constructor public {default
                          
                      }
    {construct-super}
  }

  
  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  {method public {start-document}:void
    set self.error-code = 0
    set self.error-msg = ""
  }

  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  {method public {end-document}:void
   
  }


  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  {method public {start-element
                     uri:String,
                     name:String,
                     qname:String,
                     atts:Attributes
                 }:void
    
||--    set self.nesting-depth = self.nesting-depth + 1

||--    let node:TXmlTreeNode = {TXmlTreeNode node-data=name}
||--    {self._current.append node}
||--    set self._current = node

||--    {self.logs.append name}
    {switch name
     case "Root" do
     case "Parameters" do        
     case "Parameter" do        

     case "Dataset" do
            {for i:int=0 below {atts.get-length} do
                let name:#String = {atts.get-local-name i}
                {if name == "id" then                    
                    let value:#String = {atts.get-value i}
                    {if-non-null value=value then                        
                        set self.dataset-id = value
                    }
                }
            }
        
     case "ColumnInfo" do
     case "Column" do
||--        {if self.tag == "ColumnInfo" then
        let names:StringStringTable = {StringStringTable}
        {for i:int=0 below {atts.get-length} do
            let name:#String = {atts.get-local-name i}
            let value:#String = {atts.get-value i}
            {if-non-null name, value then
                set names[name] = value
            }
        }
        
        {if {names.key-exists? "id"} then
            let id:String = names["id"]
            set self.params[id] = names
            set names["_value_"] = "" ||초기화
        }
        
     case "Rows" do        
     case "Row" do        
     case "Col" do
        let names:StringStringTable = {StringStringTable}        
        {for i:int=0 below {atts.get-length} do
            let name:#String = {atts.get-local-name i}
            let value:#String = {atts.get-value i}
            {if-non-null name, value then
                set names[name] = value
            }
        }

        {if {names.key-exists? "id"} then
            let id:String = names["id"]
            set self.param-id = id
        }        
       
     else
        
    }

    set self.tag = name    
  }

  

  {method public {end-element
                     uri:String,
                     name:String,
                     qname:String
                 }:void
    set self.tag = ""
    {switch name
     case "Root" do
     case "Parameters" do        
     case "Parameter" do        
     case "Dataset" do
     case "ColumnInfo" do
     case "Column" do
     case "Rows" do
     case "RowsCsv" do
     case "Row" do
     case "Col" do
        set self.param-id = ""
        
     else
        
    }    

  }
  
  {method public {characters ch:StringBuf, start:int, length:int}:void
    let data:String = {ch.substr start, length}
    {if {data.trim-clone} == "" then {return}}

    {if self.tag == "Col" then
        {if self.param-id != "" then
            let hash:StringStringTable = self.params[self.param-id]
            set hash["_value_"] = {data.trim-clone}
        }
    }
  }
  
  {method public {error exception:SAXParseException}:void
    {throw exception}
  }
  
  {method public {fatal-error exception:SAXParseException}:void
    {throw exception}
  }
  
  {method public {warning exception:SAXParseException}:void
    {throw exception}
  }
  
}
